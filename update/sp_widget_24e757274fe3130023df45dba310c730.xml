<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function() {
  /* widget controller */
  var c = this;
	var lstm;
var textInput;
var tempSlider;
var lengthSlider;

function setup() {
  noCanvas();

  // Create the LSTM Generator passing it the model directory
  lstm = ml5.LSTMGenerator('models/woolf/', modelReady);

  // Grab the DOM elements
  textInput = select('#textInput');
  lengthSlider = select('#lenSlider');
  tempSlider = select('#tempSlider');

  // Run generate anytime something changes
  textInput.input(generate);
  lengthSlider.input(generate);
  tempSlider.input(generate);
}

function modelReady() {
  select('#status').html('Model Loaded');
}

function generate() {
  // Update the status log
  select('#status').html('Generating...');

  // Update the length and temperature span elements
  select('#length').html(lengthSlider.value());
  select('#temperature').html(tempSlider.value());

  // Grab the original text
  var original = textInput.value();
  // Make it to lower case
  var txt = original.toLowerCase();

  // Check if there's something
  if (txt.length > 0) {
    // Here is the data for the LSTM generator
    var data = {
      seed: txt,
      temperature: tempSlider.value(),
      length: lengthSlider.value()
    };

    // Generate text with the lstm
    lstm.generate(data, gotData);

    // Update the DOM elements with typed and generated text
    function gotData(err, result) {
      select('#status').html('Ready!');
      select('#original').html(original);
      select('#prediction').html(result);
    }
  } else {
    // Clear everything
    select('#original').html('');
    select('#prediction').html('');
  }
}
	
}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>textgeneration</id>
        <internal>false</internal>
        <link/>
        <name>TextGeneration</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {  /* populate the 'data' object */  /* e.g., data.table = $sp.getValue('table'); */})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-08-02 10:46:42</sys_created_on>
        <sys_id>24e757274fe3130023df45dba310c730</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>TextGeneration</sys_name>
        <sys_package display_value="ml5JS" source="x_87436_ml5js">d9a553e34fe3130023df45dba310c7dd</sys_package>
        <sys_policy/>
        <sys_scope display_value="ml5JS">d9a553e34fe3130023df45dba310c7dd</sys_scope>
        <sys_update_name>sp_widget_24e757274fe3130023df45dba310c730</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-08-02 10:52:53</sys_updated_on>
        <template><![CDATA[<div>
<!-- your widget template -->
  <script>
    let lstm;
let textInput;
let tempSlider;
let lengthSlider;

function setup() {
  noCanvas();

  // Create the LSTM Generator passing it the model directory
  lstm = ml5.LSTMGenerator('models/woolf/', modelReady);

  // Grab the DOM elements
  textInput = select('#textInput');
  lengthSlider = select('#lenSlider');
  tempSlider = select('#tempSlider');

  // Run generate anytime something changes
  textInput.input(generate);
  lengthSlider.input(generate);
  tempSlider.input(generate);
}

function modelReady() {
  select('#status').html('Model Loaded');
}

function generate() {
  // Update the status log
  select('#status').html('Generating...');

  // Update the length and temperature span elements
  select('#length').html(lengthSlider.value());
  select('#temperature').html(tempSlider.value());

  // Grab the original text
  let original = textInput.value();
  // Make it to lower case
  let txt = original.toLowerCase();

  // Check if there's something
  if (txt.length > 0) {
    // Here is the data for the LSTM generator
    let data = {
      seed: txt,
      temperature: tempSlider.value(),
      length: lengthSlider.value()
    };

    // Generate text with the lstm
    lstm.generate(data, gotData);

    // Update the DOM elements with typed and generated text
    function gotData(err, result) {
      select('#status').html('Ready!');
      select('#original').html(original);
      select('#prediction').html(result);
    }
  } else {
    // Clear everything
    select('#original').html('');
    select('#prediction').html('');
  }
}
  </script>
</div>]]></template>
    </sp_widget>
</record_update>
